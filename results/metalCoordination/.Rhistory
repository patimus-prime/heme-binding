source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
# ok let's reorder
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
View(mega_df)
View(Distance_and_Angles_df)
View(mega_df)
mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
View(mega_df)
# This is the main R file for this project. Launches other scripts used
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
# ok let's reorder
#BIG NOTE: PDB_CODE_DF IS NOT GENERATED BY THE ABOVE, AN ERROR IS THROWN.
#SEEMS TO BE AN ISSUE WHERE IT THINKS THERE'S 33 ROWS INSTEAD OF 32
# ISSUE ONLY APPEARS WHEN CALLING THESE SCRITPS FROM MAIN. IF RUN MANUALLY,
# THEN RUN BELOW SEPARATELY, IT WORKS. NOT SURE IF AN ISSUE WITH
# HEADERS???
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
View(Distance_and_Angles_df)
# This is the main R file for this project. Launches other scripts used
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
# ok let's reorder
#BIG NOTE: PDB_CODE_DF IS NOT GENERATED BY THE ABOVE, AN ERROR IS THROWN.
#SEEMS TO BE AN ISSUE WHERE IT THINKS THERE'S 33 ROWS INSTEAD OF 32
# ISSUE ONLY APPEARS WHEN CALLING THESE SCRITPS FROM MAIN. IF RUN MANUALLY,
# THEN RUN BELOW SEPARATELY, IT WORKS. NOT SURE IF AN ISSUE WITH
# HEADERS???
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
# note the outliers below. We can now track by the image captured in Chimera. Outliers appear
# to be produced not by nature but by failure of the monomer algorithm/how Chimera handles
# chopping up PDBs. In the case of non-monomers, this may work. But that may also require
# modifying many of the Py scripts to handle multiple hemes in one PDB. And not clear to me what
# what the value would be in the case of data aggregation. Perhaps the values acquired for each
# pocket would need to be averaged, but this could hide issues in calculation amongst the many hemes in each PDB.
hist(mega_df$volume_data)
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df
)
View(mega_df)
View(Distance_and_Angles_df)
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
setwd("~/heme-binding/results/metalCoordination")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.processed.metals.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
View(combined_results_df)
View(combined_results_df)
dplyr::filter(combined_results_df, !grepl("HEM",V1))
coordRes_df <- dplyr::filter(combined_results_df, !grepl("HEM",V1))
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
#set working directory to the folder w files!
aa_freq_path = "~/heme-binding/results/aa_frequency"
setwd(aa_freq_path)
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.txt")
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
# 3. Residues Results ----------------------------------
# now split by " " to create a df we can use to count the residues present around hemes
combined_results_df %>%
separate(V1, c("Residues",NA), " ") -> residues_data_df
# create a table of all occurrences of the residues (and some noise, which is removed in next lines)
residue_table_prelim <- table(unlist(residues_data_df))
# specify the residues, so we can filter the table just for this data. otherwise we retain noise and crap
residues_ref_ls <- c("ALA","ARG","ASN","ASP","ASX","CYS",
"GLU","GLN","GLX","GLY","HIS","ILE",
"LEU","LYS","MET","PHE","PRO","SER",
"THR","TRP","TYR","VAL")
View(residues_data_df)
# convert the table w occurrences into a dataframe, so we can perform cleaning and later plot
residue_table_prelim_df_w_crap <- as.data.frame(residue_table_prelim)
View(residue_table_prelim_df_w_crap)
# remove all the noise, keep the residues
clean_tbl <- subset(residue_table_prelim_df_w_crap, Var1 %in% residues_ref_ls)
View(clean_tbl)
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
setwd("~/heme-binding/results/metalCoordination")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.processed.metals.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Get the data from the noise ---------------------------
# from: https://stackoverflow.com/questions/22850026/filter-rows-which-contain-a-certain-string
# remove the heme coordination within porphyrin
coordRes_df <- dplyr::filter(combined_results_df, !grepl("HEM",V1))
# now filter for just amino acids.
# following the steps in aa_Freq script. Need to first convert to a table.
# then see what rows match having a residue.
# remove those that do not, put that into a table
# convert that to a dataframe and continue processing.
combined_results_df %>%
separate(V1, c("Residues",NA), " ") -> residues_data_df
# create a table of all occurrences of the residues (and some noise, which is removed in next lines)
residue_table_prelim <- table(unlist(residues_data_df))
# specify the residues, so we can filter the table just for this data. otherwise we retain noise and crap
residues_ref_ls <- c("ALA","ARG","ASN","ASP","ASX","CYS",
"GLU","GLN","GLX","GLY","HIS","ILE",
"LEU","LYS","MET","PHE","PRO","SER",
"THR","TRP","TYR","VAL")
# convert the table w occurrences into a dataframe, so we can perform cleaning and later plot
residue_table_prelim_df_w_crap <- as.data.frame(residue_table_prelim)
# remove all the noise, keep the residues
clean_tbl <- subset(residue_table_prelim_df_w_crap, Var1 %in% residues_ref_ls)
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
setwd("~/heme-binding/results/metalCoordination")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.processed.metals.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Get the data from the noise ---------------------------
# from: https://stackoverflow.com/questions/22850026/filter-rows-which-contain-a-certain-string
# remove the heme coordination within porphyrin
coordRes_df <- dplyr::filter(combined_results_df, !grepl("HEM",V1))
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
setwd("~/heme-binding/results/metalCoordination")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.processed.metals.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Get the data from the noise ---------------------------
# from: https://stackoverflow.com/questions/22850026/filter-rows-which-contain-a-certain-string
# remove the heme coordination within porphyrin
coordRes_df <- dplyr::filter(combined_results_df, !grepl("HEM",V1))
View(combined_results_df)
View(coordRes_df)
View(addpdbcol)
# gonna use this, not a beauitful solution but I'm tired and this is EXTRA
# https://stackoverflow.com/questions/25391975/grepl-in-r-to-find-matches-to-any-of-a-list-of-character-strings
# ctrl+F, highlight, check in selection, replace ',' with '|'
# ata$keep <- ifelse(grepl(paste(matches, collapse = "|"), data$animal), "Keep","Discard")
grepl("ALA"|"ARG"|"ASN"|"ASP"|"ASX"|"CYS"|
"GLU"|"GLN"|"GLX"|"GLY"|"HIS"|"ILE"|
"LEU"|"LYS"|"MET"|"PHE"|"PRO"|"SER"|
"THR"|"TRP"|"TYR"|"VAL",coordRes_df$V1)
# gonna use this, not a beauitful solution but I'm tired and this is EXTRA
# https://stackoverflow.com/questions/25391975/grepl-in-r-to-find-matches-to-any-of-a-list-of-character-strings
# ctrl+F, highlight, check in selection, replace ',' with '|'
# ata$keep <- ifelse(grepl(paste(matches, collapse = "|"), data$animal), "Keep","Discard")
grepl("ALA|ARG|ASN|ASP|ASX|CYS|
GLU|GLN|GLX|GLY|HIS|ILE|
LEU|LYS|MET|PHE|PRO|SER|
THR|TRP|TYR|VAL",coordRes_df$V1)
coordRes_df %>%
filter(grepl("ALA|ARG|ASN|ASP|ASX|CYS|
GLU|GLN|GLX|GLY|HIS|ILE|
LEU|LYS|MET|PHE|PRO|SER|
THR|TRP|TYR|VAL",V1)) -> horror_df
View(horror_df)
horror_df %>%
filter(!grepl("warning",V1)) -> extra_df
View(extra_df)
View(coordRes_df)
coordRes_df %>%
filter(!grepl('warning|HEM',V1)) -> pat_df
View(pat_df)
coordRes_df %>%
filter(!grepl('HEM',V1)) -> pat_df
View(pat_df)
coordRes_df %>%
filter(grepl("ALA|ARG|ASN|ASP|ASX|CYS|
GLU|GLN|GLX|GLY|HIS|ILE|
LEU|LYS|MET|PHE|PRO|SER|
THR|TRP|TYR|VAL",V1)) -> horror_df
horror_df %>%
filter(!grepl("warning",V1)) -> extra_df
View(extra_df)
View(extra_df)
coordRes_df %>%
filter(grepl("ALA|ARG|ASN|ASP|ASX|CYS|
GLU|GLN|GLX|GLY|HIS|ILE|
LEU|LYS|MET|PHE|PRO|SER|
THR|TRP|TYR|VAL",V1)) -> coordRes_df
coordRes_df %>%
filter(!grepl("warning",V1)) -> coordRes_df
View(coordRes_df)
View(coordRes_df)
View(coordRes_df)
coordRes_df %>%
separate(V1, c(NA,"d")," ") -> d_df
View(d_df)
coordRes_df %>%
separate(V1, c("stuff","d")," ") -> d_df
d_df <- c()
coordRes_df %>%
separate(V1, c("stuff","d")," ") -> d_df
View(d_df)
coordRes_df %>%
separate(V1, c("Residue_Code","Residue_Number")," ") -> coordRes_df
View(coordRes_df)
str_extract(coordRes_df$Residue_Number,regexp) -> coordRes_df$Residue_Number
regexp <- "[[:digit:]]+"
coordRes_df %>%
separate(V1, c("Residue_Code","Residue_Number")," ") -> coordRes_df
str_extract(coordRes_df$Residue_Number,regexp) -> coordRes_df$Residue_Number
View(coordRes_df)
coordRes_df$Residue_Number <- as.numeric(as.character(coordRes_df$Residue_Number))
View(coordRes_df)
coordRes_df$Residue_Code <- as.character(coordRes_df$Residue_Code)
View(coordRes_df)
View(coordRes_df)
coordRes_df -> Metal_Coordination_df
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
setwd("~/heme-binding/results/metalCoordination")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.processed.metals.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Get the data from the noise ---------------------------
# from: https://stackoverflow.com/questions/22850026/filter-rows-which-contain-a-certain-string
# remove the heme coordination within porphyrin
coordRes_df <- dplyr::filter(combined_results_df, !grepl("HEM",V1))
# now filter for just amino acids.
# following the steps in aa_Freq script. Need to first convert to a table.
# then see what rows match having a residue.
# remove those that do not, put that into a table
# convert that to a dataframe and continue processing.
# gonna use this, not a beauitful solution but I'm tired and this is EXTRA
# https://stackoverflow.com/questions/25391975/grepl-in-r-to-find-matches-to-any-of-a-list-of-character-strings
# ctrl+F, highlight, check in selection, replace ',' with '|'
# ata$keep <- ifelse(grepl(paste(matches, collapse = "|"), data$animal), "Keep","Discard")
# combined_results_df %>%
# filter(grepl('Angle', V1)) -> angle_raw_df
coordRes_df %>%
filter(grepl("ALA|ARG|ASN|ASP|ASX|CYS|
GLU|GLN|GLX|GLY|HIS|ILE|
LEU|LYS|MET|PHE|PRO|SER|
THR|TRP|TYR|VAL",V1)) -> coordRes_df
coordRes_df %>%
filter(!grepl("warning",V1)) -> coordRes_df
# ok now we need to split by spaces. Then throw out the last row lol
coordRes_df %>%
separate(V1, c("Residue_Code","Residue_Number")," ") -> coordRes_df
# get rid of .A
regexp <- "[[:digit:]]+"
str_extract(coordRes_df$Residue_Number,regexp) -> coordRes_df$Residue_Number
# convert to numeric so we can correctly merge later, if desirable. likely. Can
# add two columns of coordination. Then check if same as the two or three closest residue columns.
# report a boolean column 'TRUE' if the same. IDK if particularly useful.
coordRes_df$Residue_Number <- as.numeric(as.character(coordRes_df$Residue_Number))
#not sure if this is necessary, but whatever
coordRes_df$Residue_Code <- as.character(coordRes_df$Residue_Code)
# alright, so, that's it until we start comparing and stuff with mega_df entries
coordRes_df -> Metal_Coordination_df
rm(combined_results_df,
coordRes_df,
result_files_df)
# This is the main R file for this project. Launches other scripts used
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
source("~/heme-binding/scripts/r/metal_coordination.R")
# ok let's reorder
#BIG NOTE: PDB_CODE_DF IS NOT GENERATED BY THE ABOVE, AN ERROR IS THROWN.
#SEEMS TO BE AN ISSUE WHERE IT THINKS THERE'S 33 ROWS INSTEAD OF 32
# ISSUE ONLY APPEARS WHEN CALLING THESE SCRITPS FROM MAIN. IF RUN MANUALLY,
# THEN RUN BELOW SEPARATELY, IT WORKS. NOT SURE IF AN ISSUE WITH
# HEADERS???
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
#WE ALSO CANNOT MERGE METAL_COORDINATION. NOT YET.
# Graphs: ----------------------------------
# note the outliers below. We can now track by the image captured in Chimera. Outliers appear
# to be produced not by nature but by failure of the monomer algorithm/how Chimera handles
# chopping up PDBs. In the case of non-monomers, this may work. But that may also require
# modifying many of the Py scripts to handle multiple hemes in one PDB. And not clear to me what
# what the value would be in the case of data aggregation. Perhaps the values acquired for each
# pocket would need to be averaged, but this could hide issues in calculation amongst the many hemes in each PDB.
hist(mega_df$volume_data)
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df
)
mega_df -> AAAA_PRESENTATION_DF
View(AAAA_PRESENTATION_DF)
Distance_and_Angles_df -> AAAA_DA_DF
Metal_Coordination_df -> AAAA_METAL_DF
mega_df -> AAAA_MEGA_DF
Distance_and_Angles_df -> AAAA_DISTANG_DF
Metal_Coordination_df -> AAAA_METAL_DF
# This is the main R file for this project. Launches other scripts used
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
source("~/heme-binding/scripts/r/metal_coordination.R")
# ok let's reorder
#BIG NOTE: PDB_CODE_DF IS NOT GENERATED BY THE ABOVE, AN ERROR IS THROWN.
#SEEMS TO BE AN ISSUE WHERE IT THINKS THERE'S 33 ROWS INSTEAD OF 32
# ISSUE ONLY APPEARS WHEN CALLING THESE SCRITPS FROM MAIN. IF RUN MANUALLY,
# THEN RUN BELOW SEPARATELY, IT WORKS. NOT SURE IF AN ISSUE WITH
# HEADERS???
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
#WE ALSO CANNOT MERGE METAL_COORDINATION. NOT YET.
# so it's easy to see:
mega_df -> AAAA_MEGA_DF
Distance_and_Angles_df -> AAAA_DISTANG_DF
Metal_Coordination_df -> AAAA_METAL_DF
# Graphs: ----------------------------------
# note the outliers below. We can now track by the image captured in Chimera. Outliers appear
# to be produced not by nature but by failure of the monomer algorithm/how Chimera handles
# chopping up PDBs. In the case of non-monomers, this may work. But that may also require
# modifying many of the Py scripts to handle multiple hemes in one PDB. And not clear to me what
# what the value would be in the case of data aggregation. Perhaps the values acquired for each
# pocket would need to be averaged, but this could hide issues in calculation amongst the many hemes in each PDB.
hist(mega_df$volume_data)
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df,
)
View(AAAA_MEGA_DF)
View(AAAA_METAL_DF)
View(AAAA_DISTANG_DF)
View(AAAA_DISTANG_DF)
View(AAAA_DISTANG_DF)
