# This is the main R file for this project. Launches other scripts used
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
source("~/heme-binding/scripts/r/metal_coordination.R")
# ok let's reorder
#BIG NOTE: PDB_CODE_DF IS NOT GENERATED BY THE ABOVE, AN ERROR IS THROWN.
#SEEMS TO BE AN ISSUE WHERE IT THINKS THERE'S 33 ROWS INSTEAD OF 32
# ISSUE ONLY APPEARS WHEN CALLING THESE SCRITPS FROM MAIN. IF RUN MANUALLY,
# THEN RUN BELOW SEPARATELY, IT WORKS. NOT SURE IF AN ISSUE WITH
# HEADERS???
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
#WE ALSO CANNOT MERGE METAL_COORDINATION. NOT YET.
# so it's easy to see:
mega_df -> AAAA_MEGA_DF
Distance_and_Angles_df -> AAAA_DISTANG_DF
Metal_Coordination_df -> AAAA_METAL_DF
# Graphs: ----------------------------------
# note the outliers below. We can now track by the image captured in Chimera. Outliers appear
# to be produced not by nature but by failure of the monomer algorithm/how Chimera handles
# chopping up PDBs. In the case of non-monomers, this may work. But that may also require
# modifying many of the Py scripts to handle multiple hemes in one PDB. And not clear to me what
# what the value would be in the case of data aggregation. Perhaps the values acquired for each
# pocket would need to be averaged, but this could hide issues in calculation amongst the many hemes in each PDB.
hist(mega_df$volume_data)
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df,
)
View(AAAA_MEGA_DF)
View(AAAA_DISTANG_DF)
View(AAAA_METAL_DF)
View(AAAA_DISTANG_DF)
boxplot(AAAA_DISTANG_DF$Residue_Code,AAAA_DISTANG_DF$Distance)
hist(AAAA_DISTANG_DF$Residue_Code,AAAA_DISTANG_DF$Distance)
View(AAAA_MEGA_DF)
View(AAAA_METAL_DF)
View(AAAA_MEGA_DF)
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
setwd("~/heme-binding/results/only_distances")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.only.dist.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Get the data from the noise ---------------------------
View(combined_results_df)
View(combined_results_df)
# drop anything but results, probably just first two lines of 'opening file'
combined_results_df %>%
filter(grepl('Atom being analyzed...', V1)) -> combined_results_df
View(combined_results_df)
combined_results_df %>%
filter(grepl('Residue_Analyzed',V1)) -> residue_analyzed_df
combined_results_df %>%
separate(V1, c('Residue_Analyzed','Distance'),' ...Distance to Fe... ') -> hopeful_df
View(hopeful_df)
View(combined_results_df)
combined_results_df %>%
separate(V1, c(NA,'keep'),'Atom being analyzed...') -> boom_df
View(boom_df)
combined_results_df %>%
separate(V1, c(NA,'V1'),'Atom being analyzed...') -> boom_df
View(boom_df)
boom_df %>%
separate(V1, c('Residue_Analyzed','Distance'),' ...Distance to Fe... ') -> hopeful_df
View(hopeful_df)
boom_df %>%
separate(V1, c('Residue_Analyzed','Distance'),'....Distance to Fe....') -> hopeful_df
View(hopeful_df)
View(boom_df)
View(residue_analyzed_df)
View(hopeful_df)
View(boom_df)
View(hopeful_df)
hopeful_df %>%
separate(Residue_Analyzed, c('Residue_Code','Residue_Number'),' ') -> bing_df
View(bing_df)
View(boom_df)
View(hopeful_df)
View(bing_df)
View(hopeful_df)
hopeful_df %>%
separate(data = hopeful_df, col = Residue_Analyzed, into = c('Residue_Code','Residue_Number'),  sep = '\\ ') -> bing_df
View(bing_df)
hopeful_df %>%
separate(Residue_Analyzed, c('Residue_Code','Residue_Number'),'\ ') -> bing_df
View(bing_df)
hopeful_df %>%
separate(Residue_Analyzed, c('Residue_Code','Residue_Number'),'\\ ') -> bing_df
View(bing_df)
combined_results_df %>%
filter(grepl('Atom being analyzed...', V1)) -> combined_results_df
combined_results_df %>%
separate(V1, c(NA,'V1'),'Atom being analyzed....') -> boom_df
boom_df %>%
separate(V1, c('Residue_Analyzed','Distance'),'....Distance to Fe....') -> hopeful_df
hopeful_df %>%
separate(Residue_Analyzed, c('Residue_Code','Residue_Number'),' ') -> bing_df
View(bing_df)
View(hopeful_df)
hopeful_df %>%
separate(Residue_Analyzed, c('Residue_Code','Residue_Number','Atom'),' ') -> bing_df
View(bing_df)
str_extract(bing_df$Residue_Number,regexp) -> bing_df$Residue_Number
View(bing_df)
regexp <- "[[:digit:]]+"
str_extract(bing_df$Residue_Number,regexp) -> bing_df$Residue_Number
View(bing_df)
combined_results_df %>%
separate(V1, c(NA,'V1'),'Atom being analyzed....') -> OnlyDistance_df
OnlyDistance_df %>%
separate(V1, c('Residue_Analyzed','Distance'),'....Distance to Fe....') -> OnlyDistance_df
OnlyDistance_df %>%
separate(Residue_Analyzed, c('Residue_Code','Residue_Number','Atom'),' ') -> OnlyDistance_df
# Remove .A from residue number in next two lines
regexp <- "[[:digit:]]+"
str_extract(OnlyDistance_df$Residue_Number,regexp) -> OnlyDistance_df$Residue_Number
View(OnlyDistance_df)
# NOTE: THIS DOES REMOVE AN INTERESTING FE THAT IS NOT AT 0. THIS IS THE DOUBLE HEME POCKET.
OnlyDistance_df %>%
filter(!grepl('Fe'),Atom) -> clean_df
# NOTE: THIS DOES REMOVE AN INTERESTING FE THAT IS NOT AT 0. THIS IS THE DOUBLE HEME POCKET.
OnlyDistance_df %>%
filter(!grepl('Fe',Atom)) -> clean_df
View(clean_df)
# NOTE: THIS DOES REMOVE AN INTERESTING FE THAT IS NOT AT 0. THIS IS THE DOUBLE HEME POCKET.
OnlyDistance_df %>%
filter(!grepl("Fe",Atom)) -> clean_df
# NOTE: THIS DOES REMOVE AN INTERESTING FE THAT IS NOT AT 0. THIS IS THE DOUBLE HEME POCKET.
OnlyDistance_df %>%
filter(!grepl("FE",Atom)) -> clean_df
View(clean_df)
OnlyDistance_df %>%
filter(!grepl("HEM",Residue_Code)) -> OnlyDistance_df
OnlyDistance_df %>%
filter(!grepl("FE",Atom)) -> OnlyDistance_df
View(OnlyDistance_df)
View(OnlyDistance_df)
# This is the main R file for this project. Launches other scripts used
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
source("~/heme-binding/scripts/r/metal_coordination.R")
# ok let's reorder
#BIG NOTE: PDB_CODE_DF IS NOT GENERATED BY THE ABOVE, AN ERROR IS THROWN.
#SEEMS TO BE AN ISSUE WHERE IT THINKS THERE'S 33 ROWS INSTEAD OF 32
# ISSUE ONLY APPEARS WHEN CALLING THESE SCRITPS FROM MAIN. IF RUN MANUALLY,
# THEN RUN BELOW SEPARATELY, IT WORKS. NOT SURE IF AN ISSUE WITH
# HEADERS???
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
#WE ALSO CANNOT MERGE METAL_COORDINATION. NOT YET.
# so it's easy to see:
mega_df -> AAAA_MEGA_DF
Distance_and_Angles_df -> AAAA_DISTANG_DF
Metal_Coordination_df -> AAAA_METAL_DF
# Graphs: ----------------------------------
# note the outliers below. We can now track by the image captured in Chimera. Outliers appear
# to be produced not by nature but by failure of the monomer algorithm/how Chimera handles
# chopping up PDBs. In the case of non-monomers, this may work. But that may also require
# modifying many of the Py scripts to handle multiple hemes in one PDB. And not clear to me what
# what the value would be in the case of data aggregation. Perhaps the values acquired for each
# pocket would need to be averaged, but this could hide issues in calculation amongst the many hemes in each PDB.
hist(mega_df$volume_data)
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df,
)
View(AAAA_MEGA_DF)
View(AAAA_DISTANG_DF)
