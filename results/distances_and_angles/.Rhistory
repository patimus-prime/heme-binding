#head(Distance_and_Angles_df)
angleplot <- ggplot(Distance_and_Angles_df, aes(x=Residue_Code, y=Angle, fill = Residue_Code)) +
geom_violin(trim=FALSE) +
labs(title = "Angles of Residues v. Heme (planar) in each PDB", x="Residue",y="Angle")
# This script is to import all distance/angle data into R.
# slightly dependent uponn Python script details as to what
# additional... helper information is printed out into the replylog.
# here we go:
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
#for filtering: https://www.youtube.com/watch?v=PsSqn0pxouM
anglesFn <- function()
{
# 0. Notes on global variables...---------------------------
#may need to specify this option every run/change for running ALL PROCESSED FILES
#options(max.print = 999999999999999999999) #or whatever number
# 1. Assembling all results into one dataframe -----------------------------
#set working directory to the folder w files!
#hemeSA_path = "~/heme-binding/results/hemeSA"
#setwd(hemeSA_path)
setwd("~/heme-binding/results/distances_and_angles")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.dist.angle.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Acquire data from noise ---------------------------------------
# aight, this reply log kinda sucks so we're gonna need multiple data frames to cope
# kinda gonna reference *SA.R to deal with multiple outputs in one file
# forgive me for the extra dataframes! Will try to sweep up at the end.
# this grabs only the lines containing the grepl. We'll grab
# specific results first into respective dataframes, then join at the end.
# so, e.g. Distance df. AA# and residue code df. Angle df. Join by AA or whatever later.
# distance_raw_df contains all lines with 'Distance'
combined_results_df %>%
filter(grepl('Distance', V1)) -> distance_raw_df
# 'to a' can be used to get residue number
# aa_num_raw_df contains all lines with the residues and residue number.
combined_results_df %>%
filter(grepl('currently processing residue...', V1)) -> aa_num_raw_df
# angle_raw_df contains all lines listing residue num and angle
combined_results_df %>%
filter(grepl('Angle', V1)) -> angle_raw_df
# 'and a" can be used to get the residue number.
# PDB ID will be needed to correctly link results/avoid doubling up on the residue #s
# if necessary, add a separate column for 'unique ID' like 1-90 for ea. pdb I guess
# hopefully unnecessary!
# So, distance first:
# 3. Process Distance -------------------------------------
# angle row # == dist row #, so we're doing great so far. GJ me.
distance_raw_df %>%
separate(V1, c(NA,"Residue_Number"), "to a") -> Distance_df
Distance_df %>%
separate(Residue_Number, c('Residue_Number', 'Distance'), "is ") -> Distance_df
#volume_data_df$volume_data <- as.numeric(as.character(volume_data_df$volume_data))
Distance_df$Distance <- as.numeric(as.character(Distance_df$Distance))
Distance_df$Residue_Number <- as.numeric(as.character(Distance_df$Residue_Number))
#this separates 'em up by a delimiter, and surprisingly splits each line perfectly
#update it for less confusion. but change the name if you'd like to verify it worked
# YAAAAAAAASSSS THAT WORKED WTFFFFFFF AMAZING
# 4. Process Amino acid residues/codes -----------------------------
#aa and num: same thing as above. use '...' to get the line. Then split by ' '
# NOTE: DO NOT SPLIT BY '...' ALONE. IT FUCKS EVERYTHING UP, likely due to regular expressions
aa_num_raw_df %>%
separate(V1, c(NA,"another_step_req"), "processing residue...") -> aa_num_raw_df
aa_num_raw_df %>%
separate(another_step_req, c('Residue_Code','Residue_Number'),' ') -> aa_num_raw_df
# next two lines to get JUST the number in the second column.
regexp <- "[[:digit:]]+"
str_extract(aa_num_raw_df$Residue_Number,regexp) -> aa_num_raw_df$Residue_Number
aa_num_raw_df -> ResCode_ResNum_df
ResCode_ResNum_df$Residue_Number <- as.numeric(as.character(ResCode_ResNum_df$Residue_Number))
# 5. PRocess angles ------------------------------------
# linking by PDB ID and residue NUM now possible! would give + Residue Code, in this case
# FINALLY! We get angle!
# delimiter ' and ' to get the: aNN and angle.
angle_raw_df %>%
separate(V1, c(NA,'raw_angle_lines'), 'and ') -> angle_raw_df
#split by ' is '
angle_raw_df %>%
separate(raw_angle_lines, c('Residue_Number','Angle'),' is ') -> Angles_df
str_extract(Angles_df$Residue_Number,regexp) -> Angles_df$Residue_Number
Angles_df$Residue_Number <- as.numeric(as.character(Angles_df$Residue_Number))
# so for our purposes now, we have: Angles_df. ResCode_ResNum_df. Distance_df
#this must all now be merged!
#use this:
# https://stackoverflow.com/questions/6709151/how-do-i-combine-two-data-frames-based-on-two-columns
# NOTE: ALL THE ABOVE 'AS.NUMERIC, AS.CHARACTER' ARE TO GET THE DISTANCE FROM STR -> NUMERIC,
# SO THAT THE MERGE BELOW CAN ACTUALLY OCCUR.
# 6. Merge ---------------------------
omega_df <- merge(Distance_df,Angles_df,by = c("PDB_ID","Residue_Number"))#,"Residue_Number"))
omega_df <- merge(omega_df,ResCode_ResNum_df, by = c("PDB_ID","Residue_Number"))
Distance_and_Angles_df <- omega_df
# 7. Plotting ---------------------------
# all data in Distances...df, and we are only interested in the angles.
# btw we can probably revert to'plane' for HEM. Since only interested in angles
# we must convert type to factor, for this plot
Distance_and_Angles_df$Angle <- as.numeric(as.character(Distance_and_Angles_df$Angle))
Distance_and_Angles_df$Residue_Number <- as.numeric(as.character(Distance_and_Angles_df$Residue_Number))
Distance_and_Angles_df$Residue_Code <- as.factor(Distance_and_Angles_df$Residue_Code)
#head(Distance_and_Angles_df)
angleplot <- ggplot(Distance_and_Angles_df, aes(x=Residue_Code, y=Angle, fill = Residue_Code)) +
geom_violin(trim=FALSE) +
labs(title = "Angles of Residues v. Heme (planar) in each PDB", x="Residue",y="Angle")
angleplot #ENSURE YOU CONVERT TO NUMERIC DATA TYPES ABOVE
#welp, that's not conclusive, at all.
# CLEANUP ---------------------------
rm(awesome_df,
combined_results_df,
dist_aa_df,
distance_raw_df,
omega_df,
result_files_df,
regexp,
result_files_ls,
aa_num_raw_df,
aa_super_df,
ang1_df,
angle_raw_df
)
#return stuff ----------
return(#list()
)
}
# This script is to import all distance/angle data into R.
# slightly dependent uponn Python script details as to what
# additional... helper information is printed out into the replylog.
# here we go:
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
#for filtering: https://www.youtube.com/watch?v=PsSqn0pxouM
anglesFn <- function()
{
# 0. Notes on global variables...---------------------------
#may need to specify this option every run/change for running ALL PROCESSED FILES
#options(max.print = 999999999999999999999) #or whatever number
# 1. Assembling all results into one dataframe -----------------------------
#set working directory to the folder w files!
#hemeSA_path = "~/heme-binding/results/hemeSA"
#setwd(hemeSA_path)
setwd("~/heme-binding/results/distances_and_angles")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.dist.angle.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Acquire data from noise ---------------------------------------
# aight, this reply log kinda sucks so we're gonna need multiple data frames to cope
# kinda gonna reference *SA.R to deal with multiple outputs in one file
# forgive me for the extra dataframes! Will try to sweep up at the end.
# this grabs only the lines containing the grepl. We'll grab
# specific results first into respective dataframes, then join at the end.
# so, e.g. Distance df. AA# and residue code df. Angle df. Join by AA or whatever later.
# distance_raw_df contains all lines with 'Distance'
combined_results_df %>%
filter(grepl('Distance', V1)) -> distance_raw_df
# 'to a' can be used to get residue number
# aa_num_raw_df contains all lines with the residues and residue number.
combined_results_df %>%
filter(grepl('currently processing residue...', V1)) -> aa_num_raw_df
# angle_raw_df contains all lines listing residue num and angle
combined_results_df %>%
filter(grepl('Angle', V1)) -> angle_raw_df
# 'and a" can be used to get the residue number.
# PDB ID will be needed to correctly link results/avoid doubling up on the residue #s
# if necessary, add a separate column for 'unique ID' like 1-90 for ea. pdb I guess
# hopefully unnecessary!
# So, distance first:
# 3. Process Distance -------------------------------------
# angle row # == dist row #, so we're doing great so far. GJ me.
distance_raw_df %>%
separate(V1, c(NA,"Residue_Number"), "to a") -> Distance_df
Distance_df %>%
separate(Residue_Number, c('Residue_Number', 'Distance'), "is ") -> Distance_df
#volume_data_df$volume_data <- as.numeric(as.character(volume_data_df$volume_data))
Distance_df$Distance <- as.numeric(as.character(Distance_df$Distance))
Distance_df$Residue_Number <- as.numeric(as.character(Distance_df$Residue_Number))
#this separates 'em up by a delimiter, and surprisingly splits each line perfectly
#update it for less confusion. but change the name if you'd like to verify it worked
# YAAAAAAAASSSS THAT WORKED WTFFFFFFF AMAZING
# 4. Process Amino acid residues/codes -----------------------------
#aa and num: same thing as above. use '...' to get the line. Then split by ' '
# NOTE: DO NOT SPLIT BY '...' ALONE. IT FUCKS EVERYTHING UP, likely due to regular expressions
aa_num_raw_df %>%
separate(V1, c(NA,"another_step_req"), "processing residue...") -> aa_num_raw_df
aa_num_raw_df %>%
separate(another_step_req, c('Residue_Code','Residue_Number'),' ') -> aa_num_raw_df
# next two lines to get JUST the number in the second column.
regexp <- "[[:digit:]]+"
str_extract(aa_num_raw_df$Residue_Number,regexp) -> aa_num_raw_df$Residue_Number
aa_num_raw_df -> ResCode_ResNum_df
ResCode_ResNum_df$Residue_Number <- as.numeric(as.character(ResCode_ResNum_df$Residue_Number))
# 5. PRocess angles ------------------------------------
# linking by PDB ID and residue NUM now possible! would give + Residue Code, in this case
# FINALLY! We get angle!
# delimiter ' and ' to get the: aNN and angle.
angle_raw_df %>%
separate(V1, c(NA,'raw_angle_lines'), 'and ') -> angle_raw_df
#split by ' is '
angle_raw_df %>%
separate(raw_angle_lines, c('Residue_Number','Angle'),' is ') -> Angles_df
str_extract(Angles_df$Residue_Number,regexp) -> Angles_df$Residue_Number
Angles_df$Residue_Number <- as.numeric(as.character(Angles_df$Residue_Number))
# so for our purposes now, we have: Angles_df. ResCode_ResNum_df. Distance_df
#this must all now be merged!
#use this:
# https://stackoverflow.com/questions/6709151/how-do-i-combine-two-data-frames-based-on-two-columns
# NOTE: ALL THE ABOVE 'AS.NUMERIC, AS.CHARACTER' ARE TO GET THE DISTANCE FROM STR -> NUMERIC,
# SO THAT THE MERGE BELOW CAN ACTUALLY OCCUR.
# 6. Merge ---------------------------
omega_df <- merge(Distance_df,Angles_df,by = c("PDB_ID","Residue_Number"))#,"Residue_Number"))
omega_df <- merge(omega_df,ResCode_ResNum_df, by = c("PDB_ID","Residue_Number"))
Distance_and_Angles_df <- omega_df
# 7. Plotting ---------------------------
# all data in Distances...df, and we are only interested in the angles.
# btw we can probably revert to'plane' for HEM. Since only interested in angles
# we must convert type to factor, for this plot
Distance_and_Angles_df$Angle <- as.numeric(as.character(Distance_and_Angles_df$Angle))
Distance_and_Angles_df$Residue_Number <- as.numeric(as.character(Distance_and_Angles_df$Residue_Number))
Distance_and_Angles_df$Residue_Code <- as.factor(Distance_and_Angles_df$Residue_Code)
#head(Distance_and_Angles_df)
angleplot <- ggplot(Distance_and_Angles_df, aes(x=Residue_Code, y=Angle, fill = Residue_Code)) +
geom_violin(trim=FALSE) +
labs(title = "Angles of Residues v. Heme (planar) in each PDB", x="Residue",y="Angle")
angleplot #ENSURE YOU CONVERT TO NUMERIC DATA TYPES ABOVE
#welp, that's not conclusive, at all.
# CLEANUP ---------------------------
rm(awesome_df,
combined_results_df,
dist_aa_df,
distance_raw_df,
omega_df,
result_files_df,
regexp,
result_files_ls,
aa_num_raw_df,
aa_super_df,
ang1_df,
angle_raw_df
)
#return stuff ----------
return(#list()
)
}
# This is the main R file for this project. Launches other scripts used
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
source("~/heme-binding/scripts/r/metal_coordination.R")
source("~/heme-binding/scripts/r/only_distances.R")
# ok let's reorder
# merge all dataframes reported (not produced by functions) into mega dataframe: -----
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
#WE ALSO CANNOT MERGE METAL_COORDINATION. NOT YET.
# so it's easy to see:
# the four lines below acquire the dataframes produced by functions...
temp_list <- anglesFn()
Distance_and_Angles_df <- temp_list$angleDF
metal_list <- metal_coordinating_fn()
Metal_Coordination_df <- metal_list$Metal_coordination_df
# put into the easily visibile DF
mega_df -> AAAA_MEGA_DF
Distance_and_Angles_df -> AAAA_DISTANG_DF
Metal_Coordination_df -> AAAA_METAL_DF
# Graphs: ----------------------------------
# declare a list to add all plots to, makes exporting easier
plots <- list()
# AA FREQ PLOT --------------------
aa_freq_df <- aaFreq_fn()
aa_freq_plot <- barplot(aa_freq_df$Freq,
main = "Frequency of Residues within 7A of Heme",
xlab = "Residues",
ylab = "Frequency",
col = "orange",
names.arg = aa_freq_df$Var1,
)
plots <- aa_freq_plot
# METAL COORD FREQ PLOT ------------
metal_freq <- metal_list$Frequency_df
metal_coord_plot <- barplot(metal_freq$Freq,
main = "Metal Coordinating Residue Freq for Heme, as determined by Chimera",
xlab = "Residues",
ylab = "Frequency",
col = "hotpink",
names.arg =metal_freq$Var1,
)
plots <- metal_coord_plot
# Histograms/barplots of the MEGA dataframe data --------------------
# see this link for adding more stats: https://www.stattutorials.com/R/R_Describe_data2,%20Histograms.html
volume_hist <- hist(mega_df$volume_data,
main = "Volume of Pockets in ea PDB, A^3",
xlab = "Volume, A^3",
#ylab = "Frequency",
col = "darkmagenta"
)
plots <- volume_hist
heme_excSA <- hist(mega_df$Heme_Excluded_SA,
main = "Heme Excluded Surface Area in ea PDB, square A",
xlab = "Excluded Surface Area, A^2",
col = "blue"
)
plots <- heme_excSA
heme_accSA <- hist(mega_df$Heme_Accessible_SA,
main = "Heme Accessible Surface Area, A^2",
xlab = "Accessible Surface Area, A^2",
col = "lightblue"
)
plots <- heme_accSA
pocket_excSA <- hist(mega_df$Pocket_Excluded_SA,
main = "Pocket Excluded Surface Area, A^2",
xlab = "Excluded Surface Area, A^2",
col = "green"
)
plots <- pocket_excSA
pocket_accSA <- hist(mega_df$Pocket_Accessible_SA,
main = "Pocket Accessible Surface Area, A^2",
xlab = "Accessible Surface Area, A^2",
col = "lightgreen"
)
plots <- pocket_accSA
# distance plots ------------------
# return from that shit!
distance_plots <- onlyDist() # returns of all fancy plots to put in
# print the dank plots!
distance_plots
plots <- distance_plots
# angle plots -------------------
# we return a dataframe from angles also, so we use this protocol.
# found here. may be applied above: https://stackoverflow.com/questions/8936099/returning-multiple-objects-in-an-r-function
angle_plots <- anglesFn()
angle_plots$angleplot
angle_plots$coordinating_res_plot
plots <- angle_plots
# line below confirms this is a shit way to find distance
#angle_plots$min_dist_angles_plot #THIS USES DISTANCES FROM AXES PROTOCOL
# EXPORTING ALL PLOTS, AS IN THE ORDER THEY APPEAR IN THE IDE TO THE RIGHT: ------------
# from: https://stackoverflow.com/questions/35321775/save-all-plots-already-present-in-the-panel-of-rstudio/53809715
# another solution that might preserve plot name: https://stackoverflow.com/questions/24182349/r-plot-saving-and-file-name
#
# BIG NOTE: WAIT LIKE 30 SEC BEFORE RUNNING THIS CODE. IT SEEMS TO WAIT FOR STUFF
# TO PROPERLY LOAD AT THE PANEL ON THE RIGHT. IDK MAN.
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="~/heme-binding/results/0_figures_and_tables/")
#ordering:
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/heme-binding/results/0_figures_and_tables/", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("~/heme-binding/results/0_figures_and_tables/", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
# for(i in 1:(length(plots)))
#    {
#    print(plots[[i]]) #<- ggplot() + geom_point(aes(x=runif(10), y=runif(10))))
#    #print(plots[[2]] <- ggplot() + geom_point(aes(x=runif(10), y=runif(10))))
#    #print(plots[[3]] <- ggplot() + geom_point(aes(x=runif(10), y=runif(10))))
# #    }
# invisible(
#    lapply(
#       seq_along(plots),
#       function(x) ggsave(filename=paste0("myplot", x, ".png"), plot=plots[[x]])
#    ) )
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df
)
View(max_volume_df)
