distance_plots <- onlyDist() # returns of all fancy plots to put in
# print the dank plots!
distance_plots
for (i in length(distance_plots)){
distance_plots[[i]]
}
#barplot(mega_df$Pocket_Accessible_SA) # caca
# BIG NOTE: RUN VIOLINS IN ONLYDISTANCES.R OR ADD THAT CODE HERE
# EXPORTING ALL PLOTS, AS IN THE ORDER THEY APPEAR IN THE IDE TO THE RIGHT: ------------
# from: https://stackoverflow.com/questions/35321775/save-all-plots-already-present-in-the-panel-of-rstudio/53809715
# another solution that might preserve plot name: https://stackoverflow.com/questions/24182349/r-plot-saving-and-file-name
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="~/heme-binding/results/0_figures_and_tables/")
#ordering:
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/heme-binding/results/0_figures_and_tables/", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("~/heme-binding/results/0_figures_and_tables/", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df,
)
# print the dank plots!
distance_plots
nonpolar_plot <- ggplot(nonpolar_res_df,aes(x=Residue_Code,y=Distance, fill=Residue_Code)) +
geom_violin(trim=FALSE) +
labs(title = "Nonpolar Residues to Fe in each PDB - Mean+SD", x="Residue", y="Distance") +
stat_summary(fun.data = mean_sdl, mult =1,geom = "pointrange")
# here is why this has become a function: here, we can return all plots and call in main.
return(list(
nonpolar_plot,
min_dist_violin
))
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
onlyDist <- function()
{
# data acquisition ----------------------------------
setwd("~/heme-binding/results/only_distances")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.only.dist.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Get the data from the noise ---------------------------
# drop anything but results, incl. header rows or warnings
# note the 4 .... is due to my uh, affinity for ... and spaces in the python script. Changing this may avoid confusing dots below:
combined_results_df %>%
filter(grepl('Atom being analyzed...', V1)) -> combined_results_df
combined_results_df %>%
separate(V1, c(NA,'V1'),'Atom being analyzed....') -> OnlyDistance_df
OnlyDistance_df %>%
separate(V1, c('Residue_Analyzed','Distance'),'....Distance to Fe....') -> OnlyDistance_df
OnlyDistance_df %>%
separate(Residue_Analyzed, c('Residue_Code','Residue_Number','Atom'),' ') -> OnlyDistance_df
# Remove .A from residue number in next two lines
regexp <- "[[:digit:]]+"
str_extract(OnlyDistance_df$Residue_Number,regexp) -> OnlyDistance_df$Residue_Number
# May want to remove Atom entries containing 'FE' as these are all 0 or ~0.
# May also want to remove all 'HEM'
# done easily via grepl:
# NOTE: THIS DOES REMOVE AN INTERESTING FE THAT IS NOT AT 0. THIS IS THE DOUBLE HEME POCKET.
# HOWEVER, THIS RESULT IS NOT RELEVANT FOR DETERMINING BINDING CHARACTERISTICS OF HEME POCKET,
# RATHER IT'S NOISE DUE TO THE ENVIRONMENT OF THESE TWO HEMES.
# remove iron self-reporting
OnlyDistance_df %>%
filter(!grepl("FE",Atom)) -> OnlyDistance_df
# remove HEM distances
OnlyDistance_df %>%
filter(!grepl("HEM",Residue_Code)) -> OnlyDistance_df
# Now, measurements of distance ----------------
# I don't think I've subsetted per row before.
# need: for each Residue_Num, a unique row in another dataframe
# get max, min, avg, median distance to Fe. This will be input to Res_num, Res_Code. Can be linked
# only to the DISTANG_DF and REPLACE DISTANCE IN THAT DF, OR NOT REPORT IT THERE TO BEGIN WITH. BOOM.
# we already did something similar in volumes, woohoo!
# convert to numerics real quick
OnlyDistance_df$Distance <- as.numeric(as.character(OnlyDistance_df$Distance))
OnlyDistance_df$Residue_Number <- as.numeric(as.character(OnlyDistance_df$Residue_Number))
# elimination of non-residues --------------------------
#distance_table_prelim <- table(unlist(OnlyDistance_df))
residues_ref_ls <- c("ALA","ARG","ASN","ASP","ASX","CYS",
"GLU","GLN","GLX","GLY","HIS","ILE",
"LEU","LYS","MET","PHE","PRO","SER",
"THR","TRP","TYR","VAL")
# FIXME!!! CHANGE HERE TO ERRRRRADICATE THE NON-RES DATAPOINTS
OnlyDistance_df <- subset(OnlyDistance_df, Residue_Code %in% residues_ref_ls)
# STATS DF DECLARATIONS -------------------------------
# 1. Minimum distance to Fe
OnlyDistance_df %>%
group_by(PDB_ID) %>% slice(which.min(Distance)) -> min_distance_df
# maybe of interest later
#barplot(min_distance_df$Distance)
# 2. Maximum distnace to Fe
OnlyDistance_df %>%
group_by(PDB_ID) %>% slice(which.max(Distance)) -> max_distance_df
#barplot(max_distance_df$Distance) #FIXME! NEED TO CONVERT TO NUMERICS
# sensible result, we select only atoms <= 7A away. NOT RESIDUES
# next part tricky!!!!!!!!!11
# no it's not: https://stackoverflow.com/questions/21982987/mean-per-group-in-a-data-frame
# 3. Average distance to Fe
mean_dist_df <- aggregate(OnlyDistance_df[, 5], list(OnlyDistance_df$PDB_ID), mean)
# rename nasty defaults
mean_dist_df %>%
rename(
PDB_ID = Group.1,
Mean_Distance = x
) -> mean_dist_df
#hist(mean_dist_df$Mean_Distance) #so, the mean distance across all PDBs
# 4. Median distance to Fe
median_dist_df <- aggregate(OnlyDistance_df[, 5], list(OnlyDistance_df$PDB_ID), median)
#rename
median_dist_df %>%
rename(
PDB_ID = Group.1,
Median_Distance = x
) -> median_dist_df
#hist(median_dist_df$Median_Distance) # median distance across all PDBs
# GRAPHING HISTOGRAMS OF STATISTICS, MEANS AND MEDIANS OF ALL PDBS --------------------
# upon furher thought none of this is useful to see
# GRAPHING AS VIOLIN PLOT LET'S GO!!!!!  -----------------------------
#using: http://www.sthda.com/english/wiki/ggplot2-violin-plot-quick-start-guide-r-software-and-data-visualization
# we must convert type to factor, for this plot
OnlyDistance_df$Residue_Code <- as.factor(OnlyDistance_df$Residue_Code)
#head(OnlyDistance_df)
distancePlot <- ggplot(OnlyDistance_df, aes(x=Residue_Code, y=Distance, fill = Residue_Code)) +
geom_violin(trim = FALSE) +
labs(title = "All Residues' Distance to Fe in each PDB", x="Residue", y="Distance")
distancePlot #INCLUDES ALL SMALL MOLS
# note change OnlyDistance_df for just the residues
mean_SD_distPlot <- ggplot(OnlyDistance_df,aes(x=Residue_Code,y=Distance, fill=Residue_Code)) +
geom_violin(trim=FALSE) +
labs(title = "All Residues to Fe in each PDB - MEAN+SD", x="Residue", y="Distance")
mean_SD_distPlot + stat_summary(fun.data = mean_sdl, mult =1,
geom = "pointrange")
# crap if you decide two groups of plots: wih and without small molecules ---------------------------
#distance_table_prelim <- table(unlist(OnlyDistance_df))
residues_ref_ls <- c("ALA","ARG","ASN","ASP","ASX","CYS",
"GLU","GLN","GLX","GLY","HIS","ILE",
"LEU","LYS","MET","PHE","PRO","SER",
"THR","TRP","TYR","VAL")
#distance_df_prelim <- as.data.frame(distance_table_prelim)
#trial_df <- subset(OnlyDistance_df, Residue_Code %in% residues_ref_ls)
#tp <- ggplot(trial_df, aes(x=Residue_Code, y=Distance)) +
# geom_violin(trim=FALSE)
#tp #ONLY RESIDUEs
######################################33333
#not just minimums, all data with SD/emean
#########################################33
# # just residues, same plot as immediatly above:
#
# distance_table_prelim <- table(unlist(OnlyDistance_df))
# residues_ref_ls <- c("ALA","ARG","ASN","ASP","ASX","CYS",
#                      "GLU","GLN","GLX","GLY","HIS","ILE",
#                      "LEU","LYS","MET","PHE","PRO","SER",
#                      "THR","TRP","TYR","VAL")
# distance_df_prelim <- as.data.frame(distance_table_prelim)
#
# trial_df <- subset(OnlyDistance_df, Residue_Code %in% residues_ref_ls)
# mean_SD_distPlot <- ggplot(trial_df,aes(x=Residue_Code,y=Distance, fill=Residue_Code)) +
#   geom_violin(trim=FALSE) +
#   labs(title = "Closest Residues to Fe in each PDB", x="Residue", y="Distance")
# mean_SD_distPlot + stat_summary(fun.data = mean_sdl, mult =1,
#                                 geom = "pointrange")
# not so interesting results!!!! ---------------------
# TRIM DOWN TO < 5A AWAY, SHOULD BE THOSE RESIDUES THEN WITHIN 3A
# closer_df <- trial_df[trial_df$Distance <= 5.0,]
# closer_df <- as.data.frame(closer_df)
#
# u <- ggplot(closer_df, aes(x=Residue_Code,y=Distance)) +
#   geom_violin(trim=FALSE)
# u #less than 5A away
# CLOSEST RESIDUE PLOTS, V. INTERESTING ----------------
min_dist_violin <- ggplot(min_distance_df, aes(x=Residue_Code,y=Distance, fill=Residue_Code)) +
geom_violin(trim=FALSE) +
labs(title = "Closest Residues to Fe in each PDB - Boxplot, Median+Quartiles", x="Residue", y="Distance") +
geom_boxplot(width=0.1, fill="white") + #adds MEDIAN and QUARTILE
theme_classic()
min_dist_violin # the closest residue for each PDB. And how their distances fluctuate
# now this is remarkable! the coordinating residues are ALWAYS HIS, TYR OR CYS
# or mean + SD. I like this the most, let's use this.
mean_SD_of_min_df <- ggplot(min_distance_df,aes(x=Residue_Code,y=Distance, fill=Residue_Code)) +
geom_violin(trim=FALSE) +
labs(title = "Closest Residues to Fe in each PDB - Mean+SD", x="Residue", y="Distance")
mean_SD_of_min_df + stat_summary(fun.data = mean_sdl, mult =1,
geom = "pointrange")
# nonpolar plot -------------------------------
nonpolar_ref_ls <- c("LEU", "PHE", "ALA", "VAL", "ILE", "TYR", "GLY")
nonpolar_res_df <- subset(OnlyDistance_df, Residue_Code %in% nonpolar_ref_ls)
#OnlyDistance_df <- subset(OnlyDistance_df, Residue_Code %in% residues_ref_ls)
nonpolar_plot <- ggplot(nonpolar_res_df,aes(x=Residue_Code,y=Distance, fill=Residue_Code)) +
geom_violin(trim=FALSE) +
labs(title = "Nonpolar Residues to Fe in each PDB - Mean+SD", x="Residue", y="Distance") +
stat_summary(fun.data = mean_sdl, mult =1,geom = "pointrange")
#
# nonpolar_plot + stat_summary(fun.data = mean_sdl, mult =1,
#                                  geom = "pointrange")
#
#
# ggplot(nonpolar_res_df,aes(x=Residue_Code,y=Distance, fill=Residue_Code)) +
#   geom_violin(trim=FALSE) +
#   labs(title = "SUPER Nonpolar Residues to Fe in each PDB - Mean+SD", x="Residue", y="Distance") +
#   stat_summary(fun.data = mean_sdl, mult =1,
#                              geom = "pointrange")
#
#return(nonpolar_plot)
# OPTIonS FOR VIOLIN PLOTS: -----------------------------
# p + scale_x_discrete(limits=c("2", "0.5", "1")) #where p is the plot you <- into
# could add groups per residue, e.g. full spread v. just minimum
#  full example of code:
# # Basic violin plot
# ggplot(ToothGrowth, aes(x=dose, y=len)) +
#   geom_violin(trim=FALSE, fill="gray")+
#   labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")+
#   geom_boxplot(width=0.1)+
#   theme_classic()
# # Change color by groups
# dp <- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
#   geom_violin(trim=FALSE)+
#   geom_boxplot(width=0.1, fill="white")+
#   labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")
# dp + theme_classic()
# yaaaaaaaay
# not going to clean the data yet. But you may use this code from th amino acid freq script: -----------------
# here is why this has become a function: here, we can return all plots and call in main.
return(list(
nonpolar_plot,
min_dist_violin
))
}
# This is the main R file for this project. Launches other scripts used
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
source("~/heme-binding/scripts/r/metal_coordination.R")
source("~/heme-binding/scripts/r/only_distances.R")
# ok let's reorder
#BIG NOTE: PDB_CODE_DF IS NOT GENERATED BY THE ABOVE, AN ERROR IS THROWN.
#SEEMS TO BE AN ISSUE WHERE IT THINKS THERE'S 33 ROWS INSTEAD OF 32
# ISSUE ONLY APPEARS WHEN CALLING THESE SCRITPS FROM MAIN. IF RUN MANUALLY,
# THEN RUN BELOW SEPARATELY, IT WORKS. NOT SURE IF AN ISSUE WITH
# HEADERS???
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
#WE ALSO CANNOT MERGE METAL_COORDINATION. NOT YET.
# so it's easy to see:
mega_df -> AAAA_MEGA_DF
Distance_and_Angles_df -> AAAA_DISTANG_DF
Metal_Coordination_df -> AAAA_METAL_DF
# Graphs: ----------------------------------
# note the outliers below. We can now track by the image captured in Chimera. Outliers appear
# to be produced not by nature but by failure of the monomer algorithm/how Chimera handles
# chopping up PDBs. In the case of non-monomers, this may work. But that may also require
# modifying many of the Py scripts to handle multiple hemes in one PDB. And not clear to me what
# what the value would be in the case of data aggregation. Perhaps the values acquired for each
# pocket would need to be averaged, but this could hide issues in calculation amongst the many hemes in each PDB.
# Histograms/barplots of the MEGA dataframe data.
# bar plots would need WORK
hist(mega_df$volume_data)
hist(mega_df$Heme_Excluded_SA)
hist(mega_df$Heme_Accessible_SA)
hist(mega_df$Pocket_Excluded_SA)
hist(mega_df$Pocket_Accessible_SA)
# return from that shit!
distance_plots <- onlyDist() # returns of all fancy plots to put in
# print the dank plots!
distance_plots
#not necessary to plot all in list:
# for (i in length(distance_plots)){
#    distance_plots[[i]]
# }
#barplot(mega_df$Pocket_Accessible_SA) # caca
# BIG NOTE: RUN VIOLINS IN ONLYDISTANCES.R OR ADD THAT CODE HERE
# EXPORTING ALL PLOTS, AS IN THE ORDER THEY APPEAR IN THE IDE TO THE RIGHT: ------------
# from: https://stackoverflow.com/questions/35321775/save-all-plots-already-present-in-the-panel-of-rstudio/53809715
# another solution that might preserve plot name: https://stackoverflow.com/questions/24182349/r-plot-saving-and-file-name
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="~/heme-binding/results/0_figures_and_tables/")
#ordering:
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/heme-binding/results/0_figures_and_tables/", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("~/heme-binding/results/0_figures_and_tables/", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df,
)
hist(mega_df$volume_data,
main = "Volume of Pockets in ea PDB, cubic A",
xlab = "Volume, cubic A",
ylab = "Frequency",
col = "darkmagenta"
)
hist(mega_df$volume_data,
main = "Volume of Pockets in ea PDB, cubic A",
xlab = "Volume, A^3",
ylab = "Frequency",
col = "darkmagenta"
)
hist(mega_df$Heme_Excluded_SA,
main = "Heme Excluded Surface Area in ea PDB, square A",
xlab = "Excluded Surface Area, A^2",
col = "blue"
)
hist(mega_df$Heme_Accessible_SA,
main = "Heme Accessible Surface Area, A^2",
xlab = "Accessible Surface Area, A^2",
col = "lightblue"
)
hist(mega_df$Pocket_Excluded_SA,
main = "Pocket Excluded Surface Area, A^2",
xlab = "Excluded Surface Area, A^2",
col = green
)
hist(mega_df$Pocket_Excluded_SA,
main = "Pocket Excluded Surface Area, A^2",
xlab = "Excluded Surface Area, A^2",
col = "green"
)
hist(mega_df$Pocket_Accessible_SA,
main = "Pocket Accessible Surface Area, A^2",
xlab = "Accessible Surface Area, A^2",
col = "lightgreen"
)
# This is the main R file for this project. Launches other scripts used
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
#source("C:/Users/nobody/Documents/R/MyScript.R")
source("~/heme-binding/scripts/r/volume.R")
source("~/heme-binding/scripts/r/aa_frequency.R")
source("~/heme-binding/scripts/r/hemeSA.R")
source("~/heme-binding/scripts/r/pocketSA.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
source("~/heme-binding/scripts/r/source_organism.R")
source("~/heme-binding/scripts/r/dist_angles.R")
source("~/heme-binding/scripts/r/metal_coordination.R")
source("~/heme-binding/scripts/r/only_distances.R")
# ok let's reorder
#BIG NOTE: PDB_CODE_DF IS NOT GENERATED BY THE ABOVE, AN ERROR IS THROWN.
#SEEMS TO BE AN ISSUE WHERE IT THINKS THERE'S 33 ROWS INSTEAD OF 32
# ISSUE ONLY APPEARS WHEN CALLING THESE SCRITPS FROM MAIN. IF RUN MANUALLY,
# THEN RUN BELOW SEPARATELY, IT WORKS. NOT SURE IF AN ISSUE WITH
# HEADERS???
mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
#this is the way. but first must only take largest volume pocket from volume data
mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
#WE ALSO CANNOT MERGE METAL_COORDINATION. NOT YET.
# so it's easy to see:
mega_df -> AAAA_MEGA_DF
Distance_and_Angles_df -> AAAA_DISTANG_DF
Metal_Coordination_df -> AAAA_METAL_DF
# Graphs: ----------------------------------
# note the outliers below. We can now track by the image captured in Chimera. Outliers appear
# to be produced not by nature but by failure of the monomer algorithm/how Chimera handles
# chopping up PDBs. In the case of non-monomers, this may work. But that may also require
# modifying many of the Py scripts to handle multiple hemes in one PDB. And not clear to me what
# what the value would be in the case of data aggregation. Perhaps the values acquired for each
# pocket would need to be averaged, but this could hide issues in calculation amongst the many hemes in each PDB.
# Histograms/barplots of the MEGA dataframe data --------------------
# see this link for adding more stats: https://www.stattutorials.com/R/R_Describe_data2,%20Histograms.html
hist(mega_df$volume_data,
main = "Volume of Pockets in ea PDB, A^3",
xlab = "Volume, A^3",
#ylab = "Frequency",
col = "darkmagenta"
)
hist(mega_df$Heme_Excluded_SA,
main = "Heme Excluded Surface Area in ea PDB, square A",
xlab = "Excluded Surface Area, A^2",
col = "blue"
)
hist(mega_df$Heme_Accessible_SA,
main = "Heme Accessible Surface Area, A^2",
xlab = "Accessible Surface Area, A^2",
col = "lightblue"
)
hist(mega_df$Pocket_Excluded_SA,
main = "Pocket Excluded Surface Area, A^2",
xlab = "Excluded Surface Area, A^2",
col = "green"
)
hist(mega_df$Pocket_Accessible_SA,
main = "Pocket Accessible Surface Area, A^2",
xlab = "Accessible Surface Area, A^2",
col = "lightgreen"
)
# distance plots ------------------
# return from that shit!
distance_plots <- onlyDist() # returns of all fancy plots to put in
# print the dank plots!
distance_plots
#not necessary to plot all in list:
# for (i in length(distance_plots)){
#    distance_plots[[i]]
# }
#barplot(mega_df$Pocket_Accessible_SA) # caca
# BIG NOTE: RUN VIOLINS IN ONLYDISTANCES.R OR ADD THAT CODE HERE
# EXPORTING ALL PLOTS, AS IN THE ORDER THEY APPEAR IN THE IDE TO THE RIGHT: ------------
# from: https://stackoverflow.com/questions/35321775/save-all-plots-already-present-in-the-panel-of-rstudio/53809715
# another solution that might preserve plot name: https://stackoverflow.com/questions/24182349/r-plot-saving-and-file-name
plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
file.copy(from=plots.png.paths, to="~/heme-binding/results/0_figures_and_tables/")
#ordering:
plots.png.details <- file.info(plots.png.paths)
plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
sorted.png.names <- gsub(plots.dir.path, "~/heme-binding/results/0_figures_and_tables/", row.names(plots.png.details), fixed=TRUE)
numbered.png.names <- paste0("~/heme-binding/results/0_figures_and_tables/", 1:length(sorted.png.names), ".png")
# Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
file.rename(from=sorted.png.names, to=numbered.png.names)
# TIDY UP! ------------------
rm(result_files_df,
combined_results_df,
temp_df,
volume_data_clean,
no_quest,
line_w_code,
#clean_tbl,
residue_table_prelim,
result_files_df,
combined_results_df,
residue_table_prelim_df_w_crap,
residues_data_df,
#hemeSA_df,
#max_volume_df,
accessible_df,
excluded_df,
max_accessible_df,
max_excluded_df,
)
