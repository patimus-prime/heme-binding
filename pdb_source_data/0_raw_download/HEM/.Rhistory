paste(activeLigand,"ligand SA processing...")
setwd(activeResultPath)
# 0. Notes on global variables...---------------------------
#may need to specify this option every run/change for running ALL PROCESSED FILES
#options(max.print = 999999999999999999999) #or whatever number
# 1. Assembling all results into one dataframe -----------------------------
#set working directory to the folder w files!
#hemeSA_path = "~/heme-binding/results/hemeSA"
#setwd(hemeSA_path)
#setwd("~/heme-binding/results/hemeSA")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.ligandSA.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Acquire data from noise ------------
# only lines with 'surface area'
combined_results_df %>%
filter(grepl('surface area = ', V1)) -> combined_results_df
# we must divide this into two separate data frames, excluded and accessible.
# they can be merged later into two columns in the same dataframe.
# FIXME: Perhaps rewrite this later when you feel more confident in R skills
combined_results_df %>%
filter(grepl('excluded', V1)) -> excluded_df
combined_results_df %>%
filter(grepl('accessible', V1)) -> accessible_df
#these two df would change into two columns of the same in the case of rewrite
# acquire only the numeric data
# THIS ONE TO CHECK, BUT SEEMS 100% OK!
#excluded_df %>%
#  separate(V1, c(NA ,"exc_sa"), "= ") -> excluded_df[['exc_sa']]
excluded_df %>%
separate(V1, c(NA ,paste(activeLigand,"_Excluded_SA",sep = "")), "= ") -> excluded_df
accessible_df %>%
separate(V1, c(NA,paste(activeLigand,"_Accessible_SA",sep = "")),"= ") -> accessible_df#[['perf']]
# only max, in case of duplicate heme
excluded_df %>%
group_by(PDB_ID) %>% slice(which.max(Heme_Excluded_SA)) -> max_excluded_df
accessible_df %>%
group_by(PDB_ID) %>% slice(which.max(Heme_Accessible_SA)) -> max_accessible_df
# 4 into one dataframe --------------------
hemeSA_df <- max_excluded_df
hemeSA_df['Heme_Accessible_SA'] <- max_accessible_df$Heme_Accessible_SA
# and convert into numerics lol!!!!
hemeSA_df$Heme_Excluded_SA <- as.numeric(as.character(hemeSA_df$Heme_Excluded_SA))
hemeSA_df$Heme_Accessible_SA <- as.numeric(as.character(hemeSA_df$Heme_Accessible_SA))
# put into one dataframe
#hemeSA_df <- excluded_df
#hemeSA_df['Heme_Accessible_SA'] <- accessible_df$Heme_Accessible_SA
#BING BANG BOOM! hemeSA_df is the final result of all this painful work lol
#colnames(hemeSA_df)[which(names(hemeSA_df) == "V1")] <- "Excluded_SA"
#colnames(dataframe)[which(names(dataframe) == "columnName")] <- "newColumnName"
#https://stackoverflow.com/questions/6081439/changing-column-names-of-a-data-frame
}
ligandSA_fn <- function(activeLigand,activeResultPath)
{
paste(activeLigand,"ligand SA processing...")
setwd(activeResultPath)
# 0. Notes on global variables...---------------------------
#may need to specify this option every run/change for running ALL PROCESSED FILES
#options(max.print = 999999999999999999999) #or whatever number
# 1. Assembling all results into one dataframe -----------------------------
#set working directory to the folder w files!
#hemeSA_path = "~/heme-binding/results/hemeSA"
#setwd(hemeSA_path)
#setwd("~/heme-binding/results/hemeSA")
# import all the shit that's been processed
# currently using results specific file, all of type .txt; therefore:
result_files_ls <- list.files(pattern = "*.ligandSA.txt") #double check what's up
# may need to add path = whatever from wd into the parentheses
# result_files_ls is now a list of all the fuckin txt files
# now read them from the list into a dataframe
result_files_df <- lapply(result_files_ls, function(x) {read.delim(file = x, header = FALSE)})
# add source pdb column
result_files_df <- addpdbcol(result_files_df)
#i think each file now has its own dataframe. now we combine them
combined_results_df <- do.call("rbind", lapply(result_files_df, as.data.frame))
#@ line 981 (w/ orig PDBs, get an enormous volume. can either throw out this header, or filter as below)
# combined_results_df is now the final output of this section and the primary df
# 2. Acquire data from noise ------------
# only lines with 'surface area'
combined_results_df %>%
filter(grepl('surface area = ', V1)) -> combined_results_df
# we must divide this into two separate data frames, excluded and accessible.
# they can be merged later into two columns in the same dataframe.
# FIXME: Perhaps rewrite this later when you feel more confident in R skills
combined_results_df %>%
filter(grepl('excluded', V1)) -> excluded_df
combined_results_df %>%
filter(grepl('accessible', V1)) -> accessible_df
#these two df would change into two columns of the same in the case of rewrite
# acquire only the numeric data
# THIS ONE TO CHECK, BUT SEEMS 100% OK!
#excluded_df %>%
#  separate(V1, c(NA ,"exc_sa"), "= ") -> excluded_df[['exc_sa']]
excluded_df %>%
separate(V1, c(NA ,paste(activeLigand,"_Excluded_SA",sep = "")), "= ") -> excluded_df
excluded_df %>%
group_by(PDB_ID) %>% slice(which.max(Heme_Excluded_SA)) -> max_excluded_df
accessible_df %>%
group_by(PDB_ID) %>% slice(which.max(Heme_Accessible_SA)) -> max_accessible_df
#ligandSA_fn <- function(activeLigand,activeResultPath)
#{
activeLigand = "HEM"
activeLigand
#ligandSA_fn <- function(activeLigand,activeResultPath)
#{
activeLigand = "HEM"
activeLigand
print(activeLigand)
activeLigand
activeLignd
activeResultPath = "~/heme-binding/results/ligandSA/"
activeResultPath = "~/heme-binding/results/ligandSA/HEM"
setwd(activeResultPath)
paste(activeLigand,"ligand SA processing...")
activeLigand
#ligandSA_fn <- function(activeLigand,activeResultPath)
#{
activeLigand = "HEM"
#ligandSA_fn <- function(activeLigand,activeResultPath)
#{
activeLigand = c("HEM")
activeLigand
# Ligand surface area ----------------------
source("~/heme-binding/scripts/r/ligandSA.R")
resultPath = "~/heme-binding/results/ligandSA/"
# AA Frequency -----------------
source("~/heme-binding/scripts/r/aa_frequency.R")
resultPath = "~/heme-binding/results/aa_frequency/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
aa_freq_df <- aaFreq_fn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_aaFreqDf",sep=""), aa_freq_df)
}
# This is the main R file for this project. Launches other scripts used
library(dplyr)
library(data.table)
library(tidyr)
library(ggplot2) #thus far not used 22 June 2021
library(stringr)
source("~/heme-binding/scripts/r/addpdbcol.R")
#source("C:/Users/nobody/Documents/R/MyScript.R")
# for the pdb-Titles_codes script, YOU MUST NOT HAVE ANYTHING THAT COULD INTERFERE
# WITH THE REGEXP '.pdb' in the folder!!!! this will throw errors!
# now still throws an error but minor. I think it doesn't like the source dataframe only having 1 column
#source("~/heme-binding/scripts/r/metal_coordination.R") #garbage
# ok let's reorder
# DECLARATIONS --------------
ligandList = list("HEM")#,"HEC","SRM","VER","VEA")
angstromDistance = 7.0 #not sure if used here, maybe useful for figures!
# Initialize list of DFs/lists, add results in each for loop
# FIXME! The automated naming doesn't like this lol, for lists in particular
# moving ahead with fixed results and merging in a few steps.
# shitty list code in VOLUME for loop
# need a different loop for each script, as the result paths are different for all
#------ VOLUME ---------
source("~/heme-binding/scripts/r/volume.R")
resultPath = "~/heme-binding/results/volume/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
volume_dfs <- volumeFn(activeLigand,activeResultPath)
#this line is freaky fresh
# paste() automates df name creation, second arg is the df assigned. BAM!
assign(paste(activeLigand,"_maxVolDf",sep=""), volume_dfs$maxVolDf)
eval(parse(text=(paste(activeLigand,"_dfList",sep = "")))) <- list(volume_dfs$maxVolDf, volume_dfs$allVolDf)
# xx <- list(volume_dfs$maxVolDf)
#  eval(parse(text = paste(activeLigand,"_dfList",sep = ""))) <- xx
# "yy" = list(volume_dfs$allVolDf)
}
# FUCK YES THAT'S VOLUME AUTOMATED BABY! Merging will be funky, require another loop
# loop for ea. ligand to create unique mega DFs. Similar process as this.
# bam! that's all the thinking required. the rest is typing and changing
# to accomodate for HEM v. activeLigand. Bing bang boom!
# after that, adding data, testing, and otherwise doneeeeeee omg lol
# finish tonight omg fuck yess brooooo! call peeps even jesus awesomeeeee
# AA Frequency -----------------
source("~/heme-binding/scripts/r/aa_frequency.R")
resultPath = "~/heme-binding/results/aa_frequency/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
aa_freq_df <- aaFreq_fn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_aaFreqDf",sep=""), aa_freq_df)
}
# Ligand surface area ----------------------
source("~/heme-binding/scripts/r/ligandSA.R")
resultPath = "~/heme-binding/results/ligandSA/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
ligandSA_df <- ligandSA_fn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_ligandSA_df",sep = ""), ligandSA_df)
}
# Pocket Surface Area ------------------------
source("~/heme-binding/scripts/r/pocketSA.R")
resultPath = "~/heme-binding/results/pocketSA/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
pocketSA_df <- pocketSA_fn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_pocketSA_df",sep = ""), pocketSA_df)
}
# AA to ligand plane -------------
source("~/heme-binding/scripts/r/dist_angles.R")
resultPath = "~/heme-binding/results/distances_and_angles/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
planar_angles_list <- aaAnglesFn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_planar_angles_list",sep = ""), planar_angles_list)
}
HEM_planar_angles_list$angleDF #DANK
# Distances of AA atoms to Fe ------------------
source("~/heme-binding/scripts/r/only_distances.R")
resultPath = "~/heme-binding/results/only_distances/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
distancesList <- distancesFn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_distances_list",sep=""),distancesList)
#planar_angles_list <- aaAnglesFn(activeLigand,activeResultPath)
#assign(paste(activeLigand,"_planar_angles_list",sep = ""), planar_angles_list)
}
distancesList$dataframe #NOTE: DO NOT FORGET TO NAME STUFF LMAO
#  Angles CACBFe -------------------------------
source("~/heme-binding/scripts/r/anglesCACBFE.R")
resultPath = "~/heme-binding/results/angles_CA_CB_Fe/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
CACBFE_df <- CACBFE_fn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_CACBFe_DF",sep = ""),CACBFE_df)
# distancesList <- distancesFn(activeLigand,activeResultPath)
#assign(paste(activeLigand,"_distances_list",sep=""),distancesList)
#planar_angles_list <- aaAnglesFn(activeLigand,activeResultPath)
#assign(paste(activeLigand,"_planar_angles_list",sep = ""), planar_angles_list)
}
#CACBFE_df
#FIXME! ERROR FROM HERE R STOPPED GIVING CORRECT FEEDBACK
# yeahp, just restart the computer fuuuuuuck R
# PDBs titles codes ---------------
# bullshit ones, put below I guess Idk
source("~/heme-binding/scripts/r/pdb_titles_codes.R") #error here investigate 15 July 2021
resultPath = "~/heme-binding/pdb_source_data/0_raw_download/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
pdbCodeDf <- pdbTitlesCodesFn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_pdbCodesDf",sep=""),pdbCodeDf)
}
sourceOrganismDf <- c("")
# PDB source organism ---------------------
source("~/heme-binding/scripts/r/source_organism.R")
resultPath = "~/heme-binding/pdb_source_data/0_raw_download/"
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
activeResultPath = paste(resultPath,activeLigand,sep = "")
sourceOrganismDf <- sourceOrganismFn(activeLigand,activeResultPath)
assign(paste(activeLigand,"_sourceOrganismDf",sep=""),sourceOrganismDf)
#   pdbCodeDf <- pdbTitlesCodesFn(activeLigand,activeResultPath)
#  assign(paste(activeLigand,"_pdbCodesDf",sep=""),pdbCodeDf)
}
#eval(parse(text="sourceOrganismDf"))
# merge all dataframes reported (not produced by functions) into mega dataframe: -----
# MERGEEEEEEE
# NOTE: Perhaps adding DFs to a list and slowly merging may be easier.
# but uncertain if merge functions for lists of DF would produce intended results
# A LIST WOULD END UP BEING PREFERABLE IF WE WERE TO EXPAND/ADD MORE RESULTS
# BUT I'M GETTING TIRED OF THIS AND JUST WANT THE THESIS DONE AHHHHHHH
for(ligand in 1:(length(ligandList)))
{
activeLigand = ligandList[[ligand]]
# zDF <- merge(HEM_pdbCodesDf,
#              HEM_sourceOrganismDf,
#              by.x = "PDB_ID")
mergedDF <- merge(eval(parse(text = paste(activeLigand,"_pdbCodesDf",sep = ""))),
eval(parse(text = paste(activeLigand,"_sourceOrganismDf",sep = ""))),
by.x = "PDB_ID")
mergedDF <- merge(mergedDF,
eval(parse(text = paste(activeLigand,"_maxVolDf",sep = ""))),
by.x= "PDB_ID")
mergedDF <- merge(mergedDF,
eval(parse(text = paste(activeLigand,"_ligandSA_df",sep = ""))),
by.x = "PDB_ID")
mergedDF <- merge(mergedDF,
eval(parse(text = paste(activeLigand,"_pocketSA_df",sep = ""))),
by.x = "PDB_ID")
assign(paste(activeLigand,"_MERGED_DF",sep = ""),mergedDF)
}
# #other stuff:
# HEM_distances_list$dataframe
# HEM_CACBFe_DF
# HEM_planar_angles_list$angleDF
# those two lists contain plots!
# shit ------
#
# mega_df <- merge(pdb_code_df,source_organism_df,by.x = "PDB_ID")
# #this is the way. but first must only take largest volume pocket from volume data
# mega_df <- merge(mega_df, max_volume_df,by.x = "PDB_ID")
# mega_df <- merge(mega_df,hemeSA_df,by.x = "PDB_ID")
# mega_df <- merge(mega_df, pocketSA_df,by.x = "PDB_ID")
# NOTE!!! The line immediately below cannot occur. There are multiple entries in each PDB. This is what
# necessitates grabbing the top 2 or 3 residues, and listing them.
#mega_df <- merge(mega_df, Distance_and_Angles_df, by.x = "PDB_ID")
#WE ALSO CANNOT MERGE METAL_COORDINATION. NOT YET.
# so it's easy to see:
# the four lines below acquire the dataframes produced by functions...
# temp_list <- anglesFn()
# Distance_and_Angles_df <- temp_list$angleDF
#
# metal_list <- metal_coordinating_fn()
# Metal_Coordination_df <- metal_list$Metal_coordination_df
#
# CACBFE_df <- CACBFE_fn()
# put into the easily visibile DF
# mega_df -> AAAA_MEGA_DF
# Distance_and_Angles_df -> AAAA_DISTANG_DF
# Metal_Coordination_df -> AAAA_METAL_DF
#
# Graphs: ----------------------------------
for(ligand in 1:(length(ligandList)))
{
# declare a list to add all plots to, makes exporting easier
#plots <- list()
# AA FREQ PLOT --------------------
#eval(parse(text = "HEM_aaFreqPlot")) <- hist(HEM_aaFreqDf$Freq)
aafreqplot <- barplot(eval(parse(text=(paste(activeLigand,"_aaFreqDf$Freq",sep="")))),
main = paste("Frequency of Residues within 7A of ",activeLigand,sep = ""),
xlab = "Residues",
ylab = "Frequency",
col = "orange",
names.arg =
eval(parse(text = (paste(activeLigand,"_aaFreqDf$Var1",sep="")))))
HEM_maxVolDf$volume_data
HEM_MERGED_DF$volume_data
# Histograms/barplots of the MEGA dataframe data --------------------
# see this link for adding more stats: https://www.stattutorials.com/R/R_Describe_data2,%20Histograms.html
volume_hist <- hist(eval(parse(text = paste(activeLigand,"_MERGED_DF$volume_data",sep = ""))),
main = paste(activeLigand," Volume of Pockets in ea PDB, A^3", sep=""),
xlab = "Volume, A^3",
ylab = "Frequency",
col = "darkmagenta")
# volume_hist <- hist(mega_df$volume_data,
#      main = "Volume of Pockets in ea PDB, A^3",
#      xlab = "Volume, A^3",
#      #ylab = "Frequency",
#      col = "darkmagenta"
#      )
#plots <- volume_hist
#HEM_MERGED_DF$HEM_Excluded_SA
LigExcSA <- hist(eval(parse(text = paste(activeLigand,"_MERGED_DF$",activeLigand,"_Excluded_SA",sep = ""))),
main = paste(activeLigand," Excluded Surface Area in ea PDB, square A",sep = ""),
xlab = "Excluded Surface Area, A^2",
col = "blue")
# volume_hist <- hist(eval(parse(text = paste(activeLigand,"_MERGED_DF$volume_data",sep = ""))),
#
# heme_excSA <- hist(mega_df$Heme_Excluded_SA,
#      main = "Heme Excluded Surface Area in ea PDB, square A",
#      xlab = "Excluded Surface Area, A^2",
#      col = "blue"
#      )
# plots <- heme_excSA
#HEM_MERGED_DF$HEM_Accessible_SA
LigAccSA <- hist(eval(parse(text = paste(activeLigand,"_MERGED_DF$",activeLigand,"_Accessible_SA",sep = ""))),
main = paste(activeLigand," Accessible Surface Area, A^2",sep = ""),
xlab = "Accessible Surface Area, A^2",
col = "lightblue")
#plots <- heme_accSA
# eval(parse(text = paste(activeLigand,"damn",sep="")))
# eval(parse(text = paste(activeLigand,"damn"))) <- LigAccSA
HEM_MERGED_DF$Pocket_Excluded_SA
pocket_excSA <- hist(eval(parse(text = paste(activeLigand,"_MERGED_DF$","Pocket_Excluded_SA",sep = ""))),
main = paste(activeLigand," Pocket Excluded Surface Area, A^2", sep=''),
xlab = "Excluded Surface Area, A^2",
col = "green"
)
plots <- pocket_excSA
pocket_accSA <- hist(eval(parse(text = paste(activeLigand,"_MERGED_DF$","Pocket_Accessible_SA",sep = ""))),
main = paste(activeLigand, " Pocket Accessible Surface Area, A^2", sep = ''),
xlab = "Accessible Surface Area, A^2",
col = "lightgreen"
)
#
# plots <- pocket_accSA
#
#
# # distance plots ------------------
# # return from that shit!
# distance_plots <- onlyDist() # returns of all fancy plots to put in
# # print the dank plots!
# distance_plots
# plots <- distance_plots
#
# # angle plots -------------------
# # we return a dataframe from angles also, so we use this protocol.
# # found here. may be applied above: https://stackoverflow.com/questions/8936099/returning-multiple-objects-in-an-r-function
#NEED TO MAYBE ASSIGN PER LIGAND... IDK MAN THIS IS FUNKY STUFF RIGHT HERE LOL
# HEM_planar_angles_list$angleplot
# HEM_planar_angles_list$coordinating_res_plot
# HEM_planar_angles_list$min_dist_angles_plot
qq <- eval(parse(text = paste(activeLigand,"_planar_angles_list$angleplot",sep='')))
print(qq)
ww <- eval(parse(text = paste(activeLigand,"_planar_angles_list$coordinating_res_plot",sep = '')))
print(ww)
ee <- eval(parse(text = paste(activeLigand,"_planar_angles_list$min_dist_angles_plot",sep='')))
print(ee)
#
# angle_plots <- anglesFn()
# angle_plots$angleplot
# angle_plots$coordinating_res_plot
# plots <- angle_plots
# line below confirms this is a shit way to find distance
#angle_plots$min_dist_angles_plot #THIS USES DISTANCES FROM AXES PROTOCOL
# CACBFE angle plots --------------------------
# we have CACBFE_df
# only one figure to make we can do it here
cabplot <- ggplot(eval(parse(text=paste(activeLigand,"_CACBFe_DF",sep=''))),
aes(x=Residue_Code,y=Angle,fill=Residue_Code)) +   geom_violin(trim=FALSE) +
labs(title = paste(activeLigand,": Angles CA-CB-Fe per type of residue to Fe within pocket",sep=''), x="Residue",y="Angle")
print(cabplot)
#    #stat_summary(fun.data = mean_sdl, mult=1, geom="pointrange")
#
# CACBFE_plot <- ggplot(CACBFE_df,
#                       aes(x=Residue_Code,y=Angle,fill=Residue_Code)) +
#    geom_violin(trim=FALSE) +
#    labs(title = "Angles CA-CB-Fe per type of residue to Fe within pocket", x="Residue",y="Angle")
#    #stat_summary(fun.data = mean_sdl, mult=1, geom="pointrange")
# CACBFE_plot
#
# nonpolar_plot <- ggplot(nonpolar_res_df,aes(x=Residue_Code,y=Distance, fill=Residue_Code)) +
#    geom_violin(trim=FALSE) +
#    labs(title = "Nonpolar Residues to Fe in each PDB - Mean+SD", x="Residue", y="Distance") +
#    stat_summary(fun.data = mean_sdl, mult =1,geom = "pointrange")
# #
}
# FIXME!!! UNCOMMENT HERE IF YOU WISH TO USE THIS SOLUTION TO FIGURE SAVING
# # EXPORTING ALL PLOTS, AS IN THE ORDER THEY APPEAR IN THE IDE TO THE RIGHT: ------------
# # from: https://stackoverflow.com/questions/35321775/save-all-plots-already-present-in-the-panel-of-rstudio/53809715
# # another solution that might preserve plot name: https://stackoverflow.com/questions/24182349/r-plot-saving-and-file-name
# #
#
# # BIG NOTE: WAIT LIKE 30 SEC BEFORE RUNNING THIS CODE. IT SEEMS TO WAIT FOR STUFF
# # TO PROPERLY LOAD AT THE PANEL ON THE RIGHT. IDK MAN.
#
# plots.dir.path <- list.files(tempdir(), pattern="rs-graphics", full.names = TRUE);
# plots.png.paths <- list.files(plots.dir.path, pattern=".png", full.names = TRUE)
#
# file.copy(from=plots.png.paths, to="~/heme-binding/results/0_figures_and_tables/")
#
# #ordering:
# plots.png.details <- file.info(plots.png.paths)
# plots.png.details <- plots.png.details[order(plots.png.details$mtime),]
# sorted.png.names <- gsub(plots.dir.path, "~/heme-binding/results/0_figures_and_tables/", row.names(plots.png.details), fixed=TRUE)
# numbered.png.names <- paste0("~/heme-binding/results/0_figures_and_tables/", 1:length(sorted.png.names), ".png")
#
# # Rename all the .png files as: 1.png, 2.png, 3.png, and so on.
# file.rename(from=sorted.png.names, to=numbered.png.names)
#
# # for(i in 1:(length(plots)))
# #    {
# #    print(plots[[i]]) #<- ggplot() + geom_point(aes(x=runif(10), y=runif(10))))
# #    #print(plots[[2]] <- ggplot() + geom_point(aes(x=runif(10), y=runif(10))))
# #    #print(plots[[3]] <- ggplot() + geom_point(aes(x=runif(10), y=runif(10))))
# # #    }
# # invisible(
# #    lapply(
# #       seq_along(plots),
# #       function(x) ggsave(filename=paste0("myplot", x, ".png"), plot=plots[[x]])
# #    ) )
#
#
# # TIDY UP! ------------------
# rm(result_files_df,
#    combined_results_df,
#    temp_df,
#    volume_data_clean,
#    no_quest,
#    line_w_code,
#    #clean_tbl,
#    residue_table_prelim,
#    result_files_df,
#    combined_results_df,
#    residue_table_prelim_df_w_crap,
#    residues_data_df,
#    #hemeSA_df,
#    #max_volume_df,
#    accessible_df,
#    excluded_df,
#    max_accessible_df,
#    max_excluded_df
# )
